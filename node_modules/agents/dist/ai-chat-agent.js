import {
  Agent
} from "./chunk-4CIGD73X.js";
import "./chunk-E3LCYPCB.js";
import "./chunk-767EASBA.js";
import "./chunk-NKZZ66QY.js";

// src/ai-chat-agent.ts
import { appendResponseMessages } from "ai";
var decoder = new TextDecoder();
var AIChatAgent = class extends Agent {
  constructor(ctx, env) {
    super(ctx, env);
    this.sql`create table if not exists cf_ai_chat_agent_messages (
      id text primary key,
      message text not null,
      created_at datetime default current_timestamp
    )`;
    this.messages = (this.sql`select * from cf_ai_chat_agent_messages` || []).map((row) => {
      return JSON.parse(row.message);
    });
    this._chatMessageAbortControllers = /* @__PURE__ */ new Map();
  }
  _broadcastChatMessage(message, exclude) {
    this.broadcast(JSON.stringify(message), exclude);
  }
  async onMessage(connection, message) {
    if (typeof message === "string") {
      let data;
      try {
        data = JSON.parse(message);
      } catch (_error) {
        return;
      }
      if (data.type === "cf_agent_use_chat_request" && data.init.method === "POST") {
        const {
          // method,
          // keepalive,
          // headers,
          body
          // we're reading this
          //
          // // these might not exist?
          // dispatcher,
          // duplex
        } = data.init;
        const { messages } = JSON.parse(body);
        this._broadcastChatMessage(
          {
            messages,
            type: "cf_agent_chat_messages"
          },
          [connection.id]
        );
        await this.persistMessages(messages, [connection.id]);
        const chatMessageId = data.id;
        const abortSignal = this._getAbortSignal(chatMessageId);
        return this._tryCatchChat(async () => {
          const response = await this.onChatMessage(
            async ({ response: response2 }) => {
              const finalMessages = appendResponseMessages({
                messages,
                responseMessages: response2.messages
              });
              await this.persistMessages(finalMessages, [connection.id]);
              this._removeAbortController(chatMessageId);
            },
            abortSignal ? { abortSignal } : void 0
          );
          if (response) {
            await this._reply(data.id, response);
          } else {
            console.warn(
              `[AIChatAgent] onChatMessage returned no response for chatMessageId: ${chatMessageId}`
            );
            this._broadcastChatMessage(
              {
                body: "No response was generated by the agent.",
                done: true,
                id: data.id,
                type: "cf_agent_use_chat_response"
              },
              [connection.id]
            );
          }
        });
      }
      if (data.type === "cf_agent_chat_clear") {
        this._destroyAbortControllers();
        this.sql`delete from cf_ai_chat_agent_messages`;
        this.messages = [];
        this._broadcastChatMessage(
          {
            type: "cf_agent_chat_clear"
          },
          [connection.id]
        );
      } else if (data.type === "cf_agent_chat_messages") {
        await this.persistMessages(data.messages, [connection.id]);
      } else if (data.type === "cf_agent_chat_request_cancel") {
        this._cancelChatRequest(data.id);
      }
    }
  }
  async onRequest(request) {
    return this._tryCatchChat(() => {
      const url = new URL(request.url);
      if (url.pathname.endsWith("/get-messages")) {
        const messages = (this.sql`select * from cf_ai_chat_agent_messages` || []).map((row) => {
          return JSON.parse(row.message);
        });
        return Response.json(messages);
      }
      return super.onRequest(request);
    });
  }
  async _tryCatchChat(fn) {
    try {
      return await fn();
    } catch (e) {
      throw this.onError(e);
    }
  }
  /**
   * Handle incoming chat messages and generate a response
   * @param onFinish Callback to be called when the response is finished
   * @param options.signal A signal to pass to any child requests which can be used to cancel them
   * @returns Response to send to the client or undefined
   */
  async onChatMessage(onFinish, options) {
    throw new Error(
      "recieved a chat message, override onChatMessage and return a Response to send to the client"
    );
  }
  /**
   * Save messages on the server side and trigger AI response
   * @param messages Chat messages to save
   */
  async saveMessages(messages) {
    await this.persistMessages(messages);
    const response = await this.onChatMessage(async ({ response: response2 }) => {
      const finalMessages = appendResponseMessages({
        messages,
        responseMessages: response2.messages
      });
      await this.persistMessages(finalMessages, []);
    });
    if (response) {
      for await (const chunk of response.body) {
        decoder.decode(chunk);
      }
      response.body?.cancel();
    }
  }
  async persistMessages(messages, excludeBroadcastIds = []) {
    this.sql`delete from cf_ai_chat_agent_messages`;
    for (const message of messages) {
      this.sql`insert into cf_ai_chat_agent_messages (id, message) values (${message.id},${JSON.stringify(message)})`;
    }
    this.messages = messages;
    this._broadcastChatMessage(
      {
        messages,
        type: "cf_agent_chat_messages"
      },
      excludeBroadcastIds
    );
  }
  async _reply(id, response) {
    return this._tryCatchChat(async () => {
      for await (const chunk of response.body) {
        const body = decoder.decode(chunk);
        this._broadcastChatMessage({
          body,
          done: false,
          id,
          type: "cf_agent_use_chat_response"
        });
      }
      this._broadcastChatMessage({
        body: "",
        done: true,
        id,
        type: "cf_agent_use_chat_response"
      });
    });
  }
  /**
   * For the given message id, look up its associated AbortController
   * If the AbortController does not exist, create and store one in memory
   *
   * returns the AbortSignal associated with the AbortController
   */
  _getAbortSignal(id) {
    if (typeof id !== "string") {
      return void 0;
    }
    if (!this._chatMessageAbortControllers.has(id)) {
      this._chatMessageAbortControllers.set(id, new AbortController());
    }
    return this._chatMessageAbortControllers.get(id)?.signal;
  }
  /**
   * Remove an abort controller from the cache of pending message responses
   */
  _removeAbortController(id) {
    this._chatMessageAbortControllers.delete(id);
  }
  /**
   * Propagate an abort signal for any requests associated with the given message id
   */
  _cancelChatRequest(id) {
    if (this._chatMessageAbortControllers.has(id)) {
      const abortController = this._chatMessageAbortControllers.get(id);
      abortController?.abort();
    }
  }
  /**
   * Abort all pending requests and clear the cache of AbortControllers
   */
  _destroyAbortControllers() {
    for (const controller of this._chatMessageAbortControllers.values()) {
      controller?.abort();
    }
    this._chatMessageAbortControllers.clear();
  }
  /**
   * When the DO is destroyed, cancel all pending requests
   */
  async destroy() {
    this._destroyAbortControllers();
    await super.destroy();
  }
};
export {
  AIChatAgent
};
//# sourceMappingURL=ai-chat-agent.js.map